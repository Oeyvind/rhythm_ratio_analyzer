* create Csound UDOs
  - assume we have a record_enable button to gate events being sent to Record_new_event
  1. Record_new_event (update and rename receive_timevalues() in server)
    - time stamp
    - 4 event parameters, 
      - conventionally [pitch, amp, x1, x2], using midi encoding for pitch and amp (velocity)
  2. Trigger_analysis
    - triggers analysis of the events occurred since the last record_enable activation
    - expects a rank value (which ratio analysis to consider the best one)
      - skip this? it is only relevant for debugging
  3. Send_eventserver_parameters
    - send parameter controls to server:
            kbenni_weight, knd_weight, kratio_dev_weight, \
            kratio_dev_abs_max_weight, kgrid_dev_weight, \
            kevidence_weight, kautocorr_weight, kratio1_order, \
            kratio2_order, ktemperature = osc_data
  4. Generate_prob_event
    - query server for next event parameters
      - index, request_item, request_weight = osc_data
      - currently request_item and request_weight is inflexible (only one parameter)
  5. Event_generation_clock
    - based on data from 4), rewrite instr 109 as UDO
  6. Print_stm
    - print state transition matrices for the prob_logic module
  7. Clear_data
    - clear server data
      - option to clear last recorded phrase, or clear all data
  8. Play_last_phrase
    - currently in instr 3
    - mostly for debugging, but keep functionality for now
  

* clean up Csound script
  - remove time series, ratios, deviation text fields
  - one nslider for last_recorded_time_value
  - remove "calc" and "rank"
  - can we get rid of line 212 pp ?
    ; receive and process rhythm ratio data from Python
  - clean up instr 109 according to 4) and 5) above
















---
old notes:
---
* audio input to midi trigger conversion with Mountains and lakes

* markovian player could need a "sync to pulse" option, where any rhythm pattern leading to contant offbeats will be "guided" back to downbeats

* markovian generator will most likely not produce compound/composite patterns? 
  - e.g. clave and subgroupings
    - 3,3,2
    - 3,2,3,2,3,2,2 (5)
    - 3,2,2,3,2,2,4 (7)
    - ... or will it? ... if biased towards a sync to pulse/downbeat?
    - may need a "subgrouping preference" to maintain e.g. groups of 7

* the rhythm generator (markovian and variants) implemented in Python instead of Csound
  - easier to handle complex relationships and patterns
  - Csound player should be milliseconds based (kr clock, millisecond lookup for next event). As simple as possible.
    - any latency in OSC communication can be remedied (?) as event rate is relatively low
    - ask for next event data immediately after dispersing an event
    - can also ask for several next events, then discard unused events if external conditions change

* analyze several overlapping windows
  - preference rule to maintain assumption from previous window
  - novelty indicator, should not need to be placed on analysis window boundaries
  - how to maintain the whole history?
    - rewrite older ratios?
    - keep reference to new interpretation (tempo/pulse/triggerseq/ratio-subdiv)
  - save complete (compound) ratios_commondiv for whole sequence, all recordings. Personal corpus.
  - in generator: may ask for events within same tempo/complexity segment(s) of whole corpus

* rhythm analyzer still makes some mistakes
  - generate definitive test set of rhythms that it must recognize

* vst: 
  - clear should slear display also
  - auto record: 
    - enable record so that it starts recording on the first event received
    - stop recording N secs after last event (can also be manually triggered)
    - restart recording (continue) on next event after "pause"
      - when merging recording segments
        - last event from previous = first event from next phrase

